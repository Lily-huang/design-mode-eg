定义：将一个复杂对象的构建与它的表示分离，使得同样的构建过程可以创建不同的表示。
角色：
Product产品类：包含模版方法和基本方法
Builder抽象建造者：规范产品的组建
ConcreteBuilder具体创建者：实现抽象类定义的所有方法，并且返回一个组建好的对象
Director导演类：负责安排已有组件的顺序，然后告诉Builder开始创建
优点：
1、封装性
2、建造者独立，容易拓展
3、便于控制细节风险
场景：
1、相同的方法，不同的执行顺序，产生不同的事件结果时
2、多个部件或零件，都可以装配到一个对象中，但是产生的运行结果又不相同时，则可以使用该模式
3、产品类非常复杂，或者产品类中的调用顺序不同产生了不同的效能
4、在对象创建过程中会使用到系统中的一些其它对象，这些对象在产品对象的创建过程中不易得到时，可以使用建造者模式封装该对象的创建过程

与工厂方法模式的区别：注重点不同；
建造者模式最主要的功能时基本方法的调用顺序安排，即零件的配置，顺序不同产生的对象不同；
而工厂方法模式则重点时创建，创建零件是它的主要职责，柱状顺序则不是它关心的

